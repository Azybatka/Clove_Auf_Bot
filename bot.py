import json
import random
import os
import requests
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import wikipedia
from datetime import datetime
from telegram.ext import MessageHandler
from telegram.ext import filters




FORUM_LINK = "https://t.me/+N0qpf7Tf9WNkNDMy"


BAD_WORDS = {"–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "—Å—É–∫–∞", "fuck", "shit"}  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

async def auto_moderate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    text = message.text.lower()
    if any(bad_word in text for bad_word in BAD_WORDS):
        try:
            await message.delete()
            await context.bot.send_message(
                chat_id=message.chat_id,
                text=f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.first_name} —É–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª."
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)



wikipedia.set_lang("ru")

DATA_FILE = "users.json"
PROGRESS_FILE = "progress.json"

def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return []

def save_users(users):
    with open(DATA_FILE, "w") as f:
        json.dump(users, f, indent=2)

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "r") as f:
            return json.load(f)
    return {}

def save_progress(data):
    with open(PROGRESS_FILE, "w") as f:
        json.dump(data, f, indent=2)

        
# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –†–æ—Å—Ç", callback_data="open_growth")],
        [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç/—Ñ–æ—Ä—É–º", url=FORUM_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# /luck
async def luck(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user{user_id}"
    users = load_users()

    if not any(u['id'] == user_id for u in users):
        users.append({"id": user_id, "username": username})
        save_users(users)
        await update.message.reply_text(f"üå± –ü—Ä–∏–≤–µ—Ç, @{username}! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—É /luck.")
        return

    others = [u for u in users if u['id'] != user_id]
    if not others:
        await update.message.reply_text("üòï –ü–æ–∫–∞ —á—Ç–æ —Ç—ã –æ–¥–∏–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        return

    match = random.choice(others)
    await update.message.reply_text(f"üéâ –¢—ã –Ω–∞—à—ë–ª —É–¥–∞—á—É! –ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å: @{match['username']}")

# /knowledge
async def knowledge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùì –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π, –Ω–∞–ø–∏—à–∏:\n/knowledge [—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å]")
        return

    query = " ".join(context.args)
    try:
        summary = wikipedia.summary(query, sentences=3)
        page = wikipedia.page(query)
        url = page.url

        response = f"üìö *–û—Ç–≤–µ—Ç –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏:*\n\n*{query}*\n\n{summary}\n\nüîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({url})"
        await update.message.reply_markdown(response)

    except wikipedia.exceptions.DisambiguationError as e:
        await update.message.reply_text(f"üîç –£—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{', '.join(e.options[:5])}...")
    except wikipedia.exceptions.PageError:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        print(e)

# /news
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üåç –ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è", callback_data='topic_science')],
        [InlineKeyboardButton("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data='topic_mind')],
        [InlineKeyboardButton("üçè –ó–¥–æ—Ä–æ–≤—å–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ", callback_data='topic_health')],
        [InlineKeyboardButton("üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏", callback_data='topic_tech')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üóû –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=reply_markup)

def get_news_by_query(query="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"):
    url = f"https://news.google.com/rss/search?q={query}&hl=ru&gl=RU&ceid=RU:ru"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'xml')
    items = soup.find_all('item')[:3]

    if not items:
        return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."

    result = f"üóû *–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: {query.capitalize()}*\n"
    for i, item in enumerate(items, 1):
        title = item.title.text
        link = item.link.text
        pubDate = item.pubDate.text[:16]
        result += f"\n*{i}. {title}*\nüóì {pubDate} | [–ß–∏—Ç–∞—Ç—å]({link})\n"
    return result

async def handle_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'topic_tech':
        news_text = get_news_by_query("—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    elif query.data == 'topic_science':
        news_text = get_news_by_query("–Ω–∞—É–∫–∞")
    elif query.data == 'topic_mind':
        news_text = get_news_by_query("–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è")
    elif query.data == 'topic_health':
        news_text = get_news_by_query("–∑–¥–æ—Ä–æ–≤—å–µ")
    else:
        news_text = "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞."

    await query.edit_message_text(text=news_text, parse_mode="Markdown", disable_web_page_preview=False)

# /growth –∏ /grow
async def growth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await grow(update, context)

async def grow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéØ –§–æ–∫—É—Å", callback_data="growth_focus")],
        [InlineKeyboardButton("üßò –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", callback_data="growth_relax")],
        [InlineKeyboardButton("üß† –ü–∞–º—è—Ç—å", callback_data="growth_memory")],
        [InlineKeyboardButton("üíº –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="growth_productivity")],
        [InlineKeyboardButton("üí™ –°–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", callback_data="growth_discipline")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üöÄ –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞:", reply_markup=reply_markup)

async def handle_growth_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    direction = query.data.replace("growth_", "")
    today = datetime.now().strftime("%Y-%m-%d")

    progress = load_progress()
    user_data = progress.get(user_id, {})


    # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if user_data.get("direction") != direction or user_data.get("date") != today:
        streak = user_data.get("streak", 0)
        if user_data.get("date") != today:
            streak += 1

        user_data = {
            "direction": direction,
            "date": today,
            "done": False,
            "streak": streak
        }
        progress[user_id] = user_data
        save_progress(progress)

    tasks = {
        "focus": "üìå –ó–∞–¥–∞–Ω–∏–µ: 5 –º–∏–Ω—É—Ç –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        "relax": "üìå –ó–∞–¥–∞–Ω–∏–µ: 4 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞.",
        "memory": "üìå –ó–∞–¥–∞–Ω–∏–µ: –ó–∞–ø–æ–º–Ω–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏ 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.",
        "productivity": "üìå –ó–∞–¥–∞–Ω–∏–µ: –ó–∞–ø–∏—à–∏ 3 –¥–µ–ª–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏ –æ–¥–Ω–æ.",
        "discipline": "üìå –ó–∞–¥–∞–Ω–∏–µ: –°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ, —á—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª."
    }

    task = tasks.get(direction, "‚ùî –ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è.")
    done = user_data.get("done", False)
    streak = user_data.get("streak", 0)

    keyboard = []
    if not done:
        keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{direction}")]]
    else:
        task = "üéâ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"

    text = f"üå± –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{direction.capitalize()}*\nüìÖ –î–∞—Ç–∞: {today}\nüî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {streak}\n\n{task}"
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    direction = query.data.replace("done_", "")
    today = datetime.now().strftime("%Y-%m-%d")

    progress = load_progress()
    user_data = progress.get(user_id, {
        "direction": direction,
        "date": today,
        "done": False,
        "streak": 1
    })

    user_data["done"] = True
    user_data["date"] = today
    user_data["direction"] = direction
    progress[user_id] = user_data
    save_progress(progress)

    await query.edit_message_text(text="‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ üíö")

# Main
if __name__ == '__main__':
    import asyncio
    from telegram.ext import Application

    TOKEN = "7922994694:AAHqLf8exzAAuaVmUjrp62ujJgFvOqOCZRw"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("luck", luck))
    app.add_handler(CommandHandler("knowledge", knowledge))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CommandHandler("growth", growth))
    app.add_handler(CommandHandler("grow", grow))
    app.add_handler(CallbackQueryHandler(handle_topic, pattern="^topic_"))
    app.add_handler(CallbackQueryHandler(handle_growth_direction, pattern="^growth_"))
    app.add_handler(CallbackQueryHandler(mark_done, pattern="^done_"))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, auto_moderate))



    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
